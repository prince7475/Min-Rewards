Imagine that you're a teacher who's just graded the final exam in a class. 
You have a list of student scores on the final exam in a particular order 
(not necessarily sorted), and you want to reward your students. You decide 
to do so fairly by giving them arbitrary rewards following two rules: first,
all students must receive at least one reward; second, any given student must
receive strictly more rewards than an adjacent student (a student immediately 
to the left or to the right) with a lower score and must receive strictly 
fewer rewards than an adjacent student with a higher score. Assume that all 
students have different scores; in other words, the scores are all unique. 
Write a function that takes in a list of scores and returns the minimum number 
of rewards that you must give out to students, all the while satisfying the two rules.

Example: [8,4,2,1,3,6,7,9,5]
Time -> O(N^2)
Space -> O(n)
[4,3,2,1,2,3,4,5,1]
function minRewards(array){
  let reward = array.map((el) => 1)
  
  for(let i = 1; i < array.length; i++){
    let prevScore = array[i - 1]
    let prevReward = reward[i - 1]
    
    let currScore = array[i]
    let currReward = reward[i]
    if(prevScore > currScore && prevReward <= currReward){
      let idx = i - 1
      while(idx >= 0 && array[idx] > array[idx + 1] && reward[idx] <= reward[idx + 1]){
        reward[idx] = reward[idx + 1] + 1
        idx--
      }
    }else if(currScore > prevScore && currReward <= prevReward){
      reward[i] = prevReward + 1
    }
  }
  
  return reward.reduce((a,b) => a + b)
}

-- Main(array)
  let reward = [1....1] length = scores.length
  for(let i = 1; i < array.length; i++){
    let prevScore = array[i - 1]
    let prevReward = reward[i - 1]
    let currScore = array[i]
    let currReward = reward[i]
    if(prevScore > currScore && prevReward <= currReward){
    // loop back to fix rewards
    let idx = i - 1
      while(idx >= 0 && array[idx] > array[idx + 1] && reward[idx] <= reward[idx + 1]){
       reward[idx] = reward[idx + 1] + 1
       idx--
      }
    }else if(currScore > prevScore && currReward <= prevReward){
      reward[i] = prevReward + 1
    }
  }
 
  return reward.reduce((a,b) => a + b)
